What is collections module and give examples.
This module implements specialized container datatypes providing alternatives 
to Python’s general purpose built-in containers, dict, list, set, and tuple.
Ex.1: Counter – dict subclass for counting hashable objects
Ex.2: defaultdict – dict subclass that calls a factory function to supply missing values
Ex.3: namedtuple – factory function for creating tuple subclasses with named fields
####

What are generator expression and why use them?
gen = (costly_fn(data) for data in iterable)
next(gen)
They behave a bit like a "lazy list comprehension."
Use them if you want data-on-demand, but you might not want to compute all of it at once in memory
As a contract needle in [expensive_fn(item) for item in haystack]
will evaluate the entire list comprehension, and only then begins the search
Note generator expressions use parentheses instead of square brackets
####

What would be the output of this code?
ex = (x ** 2 for x in range(10))
16 in ex
>>> ???
list(ex)
>>> ???
True
[25, 36, 49, 64, 81] - the rest of the generator expression
####

What is a generator function?
It's like a normal function, except it contains the keyword yield.
When called, a generator function returns a generator iterator 
that can produce subsequent values on demand by running the function 
until it encounters a yield statement, and then pausing.
def func(n):
   for i in range(100):
      yield i**n
f = func(5)
next(f)
####

What is a decorator and what are use cases?
A decorator is a transformation that can be applied to a function
They can be used to:
- handle shared behavior to append to functions, like printing argument
- cache return values to increase performance
- set a timeout on blocking functions
- mark class properties as "read-only"
- mark methods as static methods or class methods
- define event-driven handlers (for GUIs, or web-based clients)
####

Write code for simple decorator that builds a wrapper function 
and forwards arguments and return values to and from the captured function
import functools
def memoize(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
        return function(*args, **kwargs)
    return wrapper
####

Write comprehention list with lambda expression
It should square values from 0 to 9 only if a value is divisible by 4
[(lambda x: x*x)(x) for x in range(10) if x % 4 == 0]
>>> [0, 16, 64]
[lambda x: x*x for x in range(10) if x % 4 == 0] - this is wrong as 
it will produce 10 separate lambdas
####

How to calculate variance of some list of ints - 3 ways
[1, 2, 3, 4, 5, 6, 4, 3, 2, 23, 5, 67, 7, 7]
np.sum((l - np.mean(l))**2) / len(l)
>>> 277.20918367346934

m = mean(l)
l2 = [(lambda x: (x - m)**2)(x) for x in l]
np.sum(l2) / len(l2)
>>> 277.20918367346934

v = np.var(l)
####

How can we turn class method into a property?
By using @property decorator
####

What does @staticmethod decorator do?
It behaves as normal function as it doesn't need class object nor instance object
####

What does @classmethod decorator do?
The @classmethod decorator changes method call behavior by passing 
the class object, not the instance object, as the first argument.
####

How to create private method or atribute in Python class?
There is no concept of private in Python classes
Use self._name convention to mark attribute as private
####

What are Magic methods in Python?
Methods that allow us connect to the language
and leverage Python's polymorphism. E.g. get the size of an object
__len__  -> len(obj)
print object
__str__ -> str(x)
add objects
__add__ -> obj1 + obj2
####

How produce infinite iterator?
From definition: iter(object, sentinel)
where sentinel is special value that is used to represent the end of a sequence
Hence: it = iter(int, 1) or it = iter(lamba:0, 1) will do the work
####

How to check if variable is instance of particular type of object
We may use isinstance(object, type)
i = 4
isinstance(i,int) -> True 
isinstance(i,object) -> True 
isinstance(i,float) -> True 
####

What method presents linearization of its superclass graph?
type.mro()
"method resolution order"
print(ZeroDivisionError.mro())
[ZeroDivisionError, ArithmeticError, Exception, BaseException, object]
####

Explain exception handling
try:
    dangerous_code()
except SomeError:
    handle_the_error()
else: 
    handle_no_error()
finally:
    do_no_matter_what()
####

Exception handling - how to handle multiple exceptions in one block?
try
   ...
except ValueError:
   ...
except (nameError, AttributeError):
   ...
####

Exception handling - what happens whenr
try
   ...
except:
   ...
A bare except block captures all exceptions, including subclasses 
of BaseException like KeyboardInterrupt or SystemExit! 
This means that you almost never want except: and instead want to 
capture a specific class of errors
