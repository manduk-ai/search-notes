Q: What does it mean Python is dynamically-typed?
A: Variables are declared with no explicit type

Q: x = True, y = False, z = True
Q: id(x) == id(z)???
A: Yes, Python keep only 2 objects: one for True and one for Falses
A: Those objects are singletons

Q: x = False
Q: x == 0?
A: True

Q: s = 'Udacity'
Q: s[-2] = ?
Q: s[0:2] == ?
Q: s[4:7] == ?
Q: s[4:] == ?
Q: s[1:5:2] == ?
Q: s[4::-2] == ?
A: s[-2] = t
A: s[0:2] == 'Ud'
A: s[4:7] == 'ity'
A: s[4:] == 'ity'
A: s[1:5:2] == 'dc'
A: s[4::-2] == 'iaU'

Q: s = 'Udacity'
Q: s[::-1] == ?
A: s[::-1] == 'yticadU'
A: It says: start where you're supposed to, end where you're supposed to,
A: and takes steps of -1 through this sequence - which functionally reverses a sequence.

Q: s = "ham cheese bacon eggs"
Q: ingredients = s.split()
Q: ingredients[-1] = 'scallions' -> ?
Q: ingredients[1] = 'cheddar' -> ?
Q: ingredients[1:-1] = ['spinach'] -> ?
Q: ingredients = ingredients[::2] -> ?
A: Replace 'eggs' with 'scallions'
A: Update the 'cheese' to be a specific 'cheddar' cheese
A: Replace 'cheese' and 'bacon' with 'spinach'
A: Throw out every other ingredient

Q: Are Python's lists homogeneous or heterogeneous?
A: Heterogeneous - they may include elements / objects of 
A: different types. They can also be nested -> lists of lists

Q: What method do we use to add element to the Python's list?
A: list.append(element)

Q: 9 most important methods for Python's lists
A: append(object)
A: extend(iterable)
A: insert(index, object)
A: remove(value)
A: clear - removes all items
A: pop - removes and returns last or index element of the list
A: sort
A: reverse()
A: count(value)

Q: What is a tuple?
A: A tuple is an immutable sequence of arbitrary data.
A: Immutable version of lists
A: pet = (1, 'dog')
A: fish = (1, 2, "red", "blue")
A: empty = ()
A: singleton = ("value",)
A: Tuples contain references to underlying object
A: v = ([1, 2, 3], ['a', 'b', 'c'])
A: v[0].append(4)

Q: What are the types of:
Q: var1 = ('text')
Q: var2 = ('text',)
A: The first one is a str, the second one is a tuple

Q: What is this: 
Q: 5, 6, 7
Q: x = 'a', 4, 'shot'
A: These are tuples as comma separated values are automatically converted into tuples

Q: What would be the result of the following?
Q: first, *rest = 1,2,3,4,5
Q: rest
A: a list -> [2,3,4,5]

Q: How to swap two variables?
Q: x = 100
Q: y = 1
A: 1. With a temporary variable
A: 2. By packing and unpacking tuples: x, y = y, x
A: 3. using xor: x = x ^ y    y = x ^ y     x = x ^ y

Q: How to iterate over list = ['a', 'b', 'c'] with index available
A: We use enumerate:
A: for i, ch in enumarate(list):
A:    print(i, ch)

Q: What are the results of: list("ABC") and tuple("fuck")
A: ['A', 'B', 'C']
A: ('f', 'u', 'c', 'k')

Q: How to convert string into list?
A: 'ham cheese bacon'.split()  => ['ham', 'cheese', 'bacon']
A: '03-30-2016'.split(sep='-') => ['03', '30', '2016']

Q: How to create a string from an iterable (of strings)
A: ', '.join(['Eric', 'John', 'Michael']) => "Eric, John, Michael"

Q: How to check if an element is contained in a larger element?
A: Using element in container syntax
A: 'd' in 'Udacity'  # => True
A: 12 in [5, 12, 13]  # => True
A: (3, 4, 5) in ((3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25))  # => True
A: 'daci' in 'Udacity'

Q: What will return max(iterable) and min(iterable)?
A: Maximum or minimum value in iterable collection 
A: max('Udacity') => 'y'
A: The object has to be iterable max(123) will return error

Q: How to create dict and set (empty and with values)?
A: d = {}
A: s = set()
A: d = {1: 'a', 2: 1000, 3: 'Test'}
A: s = set([1,2,3,4,1]) or set("Test")

Q: What's the results of: s = set([1,2,3,4,1]) and s = set("Test")
A: {1,2,3,4} as set keeps unique values
A: {'T', 'e', 's', 't'}

Q: How to iterate over a set
A: s = set("Test")
A: for i in s:
A:    print(i)
A: Caution: set is unorder so it may return: t, T, e,s

Q: What type has variable a = ([1,2,3,4], "Test")
A: It's a tuple

Q: Describe dict.get(key) function
A: Either the value associated with a key, or a default value if it's missing
A: We may change this defaoult value.

Q: What are three methods to access dictonaries?
A: dict.keys()
A: dict.values()
A: dict.items()
A: for value in d.values():
A:    print(value) 

Q: How to loop over dictionary's key:value pairs?
A: for key, value in mydict.items():
A:    do_something_with(key, value)

Q: How to delete elements of dictionary?
A: del d["one"] => raises error if key is missing
A: d.pop("one", default) => removes and returns value or default if key is missing
A: d.popitem() => removes arbitrary value and returns removed tuple

Q: Adding and removing elements from a set
A: a = set("mississippi")  # {'i', 'm', 'p', 's'}
A: a.add('r')
A: a.remove('m')  # Raises a KeyError if 'm' is not present.
A: a.discard('x')  # Same as `remove`, except won't raise an error.
A: a.pop()  # => 's' (or 'i' or 'p')
A: a.clear()

Q: What are mathematical operations on set?
A: a = set("abracadabra") # {'a', 'b', 'c', 'd', 'r'}
A: b = set("alacazam")    # {'a', 'm', 'c', 'l', 'z'}
A: Difference             a - b # => {'b', 'd', 'r'}
A: Union                  a | b  # => {'a', 'b', 'c', 'd', 'l', 'm', 'r', 'z'}
A: Intersection           a & b # => {'a', 'c'}
A: Symmetric Difference   a ^ b  # => {'b', 'd', 'l', 'm', 'r', 'z'}
A: Subset                 a <= b  # => False
