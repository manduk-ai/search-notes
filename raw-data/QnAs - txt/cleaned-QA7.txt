Scope for functions, if, loops
Only function definitions define a new symbol table.
if statements, for loops, while loops, and with statements 
do not introduce new symbol tables and a new scope
####

When we pass an object as an function parameter and this parameter is changed
within a functions. Does this change affect the outer object?
Python implements pass-by-object-reference â€“ Objects aren't copied, 
but the reference to them is. This means that if a mutable object is passed, 
and the function mutates the object, the caller will see changes.
####

What are Variadic Arguments? What are their types?
A variadic parameter collects excess arguments that would otherwise go 
unmatched to a parameter, into a data structure.
There 2 types: variadic positional parameters and variadic keyword parameters.
####

How positional variadic argument works?
These are usually parameters like *args and they capture excess 
positional arguments. Then they are provided in a tuple of the same name
def test(*args):
   print(args)
test(5, 6, 7, 8)
>>> (5, 6, 7, 8)
####

How to pass an object into variadic positional argument?
def product(*nums):
  do_some_thing
primes = (1, 3, 5, 7)
product(???)
product(*primes)
This allows for unpacking parameters
####

How to add single / many values to a dictionary?
d[1] = 'one'
d.update({2: 'two', 3: 'three'})
####

How to remove value from a dictionary?
d = {1: 'one', (1, 2, 3): ('one', 'two', 'three'), 2: 'two', 3: 'three'}
d.pop((1,2,3))
>>> ('one', 'two', 'three')
####

Q: How variadic keyword argument works?
A parameter of the form **kwargs in a function signature introduces 
a variadic keyword parameter. This parameter will capture excess 
keyword-supplied arguments into a dictionary named the same thing, 
such as kwargs.
####

How to pass an object into variadic keyword argument?
def authorize(quote, **speaker_info):
   ...
 
info = {'sonnet': 18, 'line': 1, 'author': "Shakespeare"}
authorize("Shall I compare thee to a summer's day", **info)
####

How to assign and access to Python's function doc?
We create doc by describing it in function's body
def echo(arg):
    """Return the first argument."""
    return arg
We may access it by either help(functions) or echo.__doc__
####

What is map function and what it does?
map is a higher order function in the form of:
map(fn, iter)
It produces iterable by applying the function to each element of iterable.
It returns iterable object so we should surround it with tuple() or list()
####

What is filter function and what it does?
filter is a higher order function in the form of:
filter(predicate_function, iterable)
It filters elements from iterable using predicate_function.
It returns iterable object so we should surround it with tuple() or list()
Note: predicate_function
- is either a lambda expression or name of the function without parameters
- returns True or False
####

What are lambda functions?
Anonymous, on-the-fly functions that are used for simple callables 
that don't need to clutter the local namespace
lambda params: expr(params)
lambda parameters: return
ex.: (lambda x: x > 3)(4) # => True
map(lambda val: val ** 2, range(10)) # Squares from 0**2 to 9**2
filter(lambda pair: pair[1] > 0, [(4,1), (3, -2), (8,0)]) # Tuples with positive second elements
sorted([(4,1), (3, -2), (8,0)], key=lambda pair: pair[1]) # Sort a collection based on a custom function.
####

What module gives us standard operators as functions?
operator
from operator import add, gt, is_not, floordiv
####

3 ways to add to list of int?
result = []
for x, y in zip(l1, l2):
   result.append(x+y)

from operator import add
list(map(add, l1, l2))

list(map(lambda x, y: x+y, l1, l2)
####

What is an iterator?
It's a stream of finite or infinite stream of data.
Iterator delivers one element at a time
next(iter) asks an iterator to yield next value. 
If there are no more values, it raises StopIteration. 
iter(data) function produces an iterator from an iterable data source.
####

What is all function?
all(iterable, /)
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
####

What is any function?
any(iterable, /)
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
####

What is zip function?
Returns iterable that produces tuple containing i-th element
from each iterator supllied to zip
next(zip(list1, list2, list3)) => (l1, l2l, l3)
####

Iterators: what will be the result of this code?
it = iter(range(100))
66 in it
next(it)
67
